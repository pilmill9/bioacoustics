head	1.4;
access;
symbols
	v2_3:1.2
	v2_1:1.2;
locks; strict;
comment	@# @;


1.4
date	2016.04.19.00.41.57;	author sherbert;	state Exp;
branches;
next	1.3;

1.3
date	2016.04.15.23.44.53;	author sherbert;	state Exp;
branches;
next	1.2;

1.2
date	2014.02.13.21.37.39;	author sherbert;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.02.02.50.42;	author mroch;	state Exp;
branches;
next	;


desc
@@


1.4
log
@error in previous commit!
@
text
@'''
Created on May 23, 2012

@@author: mroch
'''

# updates the itis collection from source document archive

import argparse
import xmlrpclib
import requests

# Tethys specific modules
import client_server

import pdb

all_collections = ['ITIS', 'SpeciesAbbreviations', 'SourceMaps', 
                   'Deployments', 'Detections', 'Localizations']


def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description="""
Add XML documents from source materials stored on the server.
This is useful for rebuilding a database after a catastrophic failure
or widespread changes to the source material.

Specifying "all" will add the following collections:\n%s
"""%(", ".join(all_collections)))
    
    client_server.add_client_opts(parser)
    parser.add_argument('collection',metavar='Collection',nargs='+',
                        help='Destination container(s) for the operation.')
    parser.add_argument('--update', type=client_server.true_false, default=False, 
                      help="""If a document exists, should it be updated?
                      Default false.""" )
    parser.add_argument('--clear', type=client_server.true_false, default=False, 
                      help=
                      "Clear container before updating documents.  This "+
                      "will not remove any source documents that are "+
                      "archived but any sources from databases will "+
                      "have to be imported again.  Think twice before "+
                      "using.  Default false.")
    
    options= parser.parse_args()

    collections = options.collection
    if not options.collection:
        parser.error("At least one collection must be specified")
    elif options.collection == "all":
        collections = all_collections
        
    # Establish connection to server
    (server_url, description) = client_server.get_url(
        options.server, options.port, options.secure_socket_layer)
        
    print "Connecting to %s server:  %s %s" % (options.servertype, 
                                               server_url, description)
    

    if options.servertype == "REST":
        boolTo01 = {True:"1", False:"0"}
        msgparams = {}
        for item in ["update", "clear"]:
            msgparams[item] = boolTo01[getattr(options, item)]

        for c in collections:
            url = server_url + "/%s/rebuild"%(c)
            print "Updating %s:  %s"%(c, url)
            result = requests.post(url, params=msgparams)
            if result.status_code != requests.codes.ok:
                print '%s error ocurred: '%(c), result.status_code
                print result.text
            else:
                print c
                print result.text
                

main()
@


1.3
log
@using argparse
@
text
@d48 1
a60 2
    print options.collection
    return
@


1.2
log
@itis --->> ITIS
@
text
@d9 1
a9 1
import optparse
d21 1
d23 8
a30 7
    parser = optparse.OptionParser("""%%prog collection1 collection2 ... collectionN
    Add XML documents from source materials stored on the server.
    This is useful for rebuilding a database after a catastrophic failure
    or widespread changes to the source material.
    
    Specifying "all" will add the following collections:\n\t%s
    """%(", ".join(all_collections)))
d33 3
a35 2
    parser.add_option('--update', type="string", default=False, 
                      action="callback", callback=client_server.true_false,
d38 1
a38 2
    parser.add_option('--clear', type="string", default=False, 
                      action="callback", callback=client_server.true_false,
d46 1
a46 1
    (options, args) = parser.parse_args()
d48 1
a48 2
    N = len(args)
    if N == 0:
d50 2
a51 2
    elif N == 1 and args[0] == "all":
        args = all_collections
d60 4
a63 12
    if options.servertype == "xmlrpc":
        server = xmlrpclib.Server(server_url)
    
        for s in args:
            try:
                print "Updating %s"%(s)
                print server.update_documents(s, s, options.update, options.clear)
            except Exception, e:
                msg = str(e).replace('\\n', '\n').replace('\\\\', '\\')
                print msg        
                
    elif options.servertype == "REST":
d69 3
a71 3
        for s in args:
            url = server_url + "/%s/rebuild"%(s)
            print "Updating %s:  %s"%(s, url)
d74 1
a74 1
                print '%s error ocurred: '%(s), result.status_code
d77 1
a77 1
                print s
@


1.1
log
@new
@
text
@d18 1
a18 1
all_collections = ['itis', 'SpeciesAbbreviations', 'SourceMaps', 
@

