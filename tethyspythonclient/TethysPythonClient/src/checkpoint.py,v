head	1.3;
access;
symbols
	v2_3:1.2
	v2_1:1.2;
locks; strict;
comment	@# @;


1.3
date	2016.04.15.23.18.45;	author sherbert;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.09.22.34.02;	author sherbert;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.13.21.28.16;	author mroch;	state Exp;
branches;
next	;


desc
@@


1.3
log
@now using argparse
@
text
@'''
Created on October 13, 2013

@@author: mroch
'''

# updates the itis collection from source document archive

import argparse
import xmlrpclib
import requests

# Tethys specific modules
import client_server

import pdb


usage ="""
Create a database checkpoint.  After successful completion, all
transactions are guaranteed to be written to the database, and
database log files may be removed with the exception of the 
current log file."""

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description = usage)
    
    client_server.add_client_opts(parser)
    
    options = parser.parse_args()
        
    # Establish connection to server
    (server_url, description) = client_server.get_url(
        options.server, options.port, options.secure_socket_layer)
        
    print "Connecting to %s server:  %s %s" % (options.servertype, 
                                               server_url, description)
    
  
                
    if options.servertype == "REST":
        msgparams = {}
        url = server_url + "/Tethys/checkpoint"
        print "Checkpointing:  %s"%(url)
        result = requests.put(url, params=msgparams)
        print result.text

main()
@


1.2
log
@removed extra %
@
text
@d9 1
a9 1
import optparse
d19 6
d26 2
a27 5
    parser = optparse.OptionParser("""%prog
    Create a database checkpoint.  After successful completion, all
    transactions are guaranteed to be written to the database, and
    database log files may be removed with the exception of the 
    current log file.""")
d31 1
a31 1
    (options, args) = parser.parse_args()
d40 1
a40 5
    if options.servertype == "xmlrpc":
        errmsg = """On demand checkpointing is not enabled for %s servers,
however the database is checkpointed each time it is started."""%(
            options.servertype)
        raise NotImplemented(errmsg)        
d42 1
a42 1
    elif options.servertype == "REST":
@


1.1
log
@new
@
text
@d20 1
a20 1
    parser = optparse.OptionParser("""%%prog
@

